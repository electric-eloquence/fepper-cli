#!/usr/bin/env node
'use strict';

const fs = require('fs');
const path = require('path');

const enc = 'utf8';

// Recurse up the directory tree to find the parent directory of a given file.
function findup(filename, workDir) {
  const workDirFiles = fs.readdirSync(workDir);

  if (workDirFiles.indexOf(filename) > -1) {
    return workDir;
  }

  // Need to work with the operating system's path separators, so use Node path methods.
  const workDirUp = path.normalize(path.join(workDir, '..'));
  const workDirUpFiles = fs.readdirSync(workDirUp);
  let dirMatch = '';

  // Return the found directory if filename has been found.
  if (workDirUpFiles.indexOf(filename) > -1) {
    return workDirUp;
  }
  // Return empty string if reached end-of-the-line.
  else if (
    workDirUp === '/' ||
    /^[A-Z]:\\$/.test(workDirUp) ||
    workDirUp.slice(0, 2) === '\\\\'
  ) {
    return '';
  }
  // Otherwise, keep trying.
  else {
    dirMatch = findup(filename, workDirUp);
  }

  return dirMatch;
}

const cwd = process.cwd();
const isWindows = (process.env.ComSpec && process.env.ComSpec.toLowerCase() === 'c:\\windows\\system32\\cmd.exe');

// Invoke findup to retrieve the parent directory of fepper.command.
let rootDir = findup('fepper.command', cwd);

// None of these fepper scripts should be deleted, but just in case any are, offer a few more tries.
if (!rootDir) {
  rootDir = findup('fepper.ps1', cwd);
}

if (!rootDir) {
  rootDir = findup('fepper.vbs', cwd);
}

// Finally, if rootDir not found, console error and exit.
if (!rootDir) {
  // eslint-disable-next-line no-console
  console.error('It appears you are trying to run fp outside a working Fepper directory! Exiting!');

  return;
}

if (!process.env.ROOT_DIR) {
  process.env.ROOT_DIR = rootDir;
}

process.chdir(rootDir);

// Set some defaults.
process.env.NODE_PATH = path.join(process.env.ROOT_DIR, 'node_modules');
let appDir = path.join(process.env.NODE_PATH, 'fepper');

// Read conf file.
const confFile = path.join(rootDir, 'conf.yml');
const confData = fs.readFileSync(confFile, enc).split('\n');

for (let confDatum of confData) {
  const confKeyVal = confDatum.split(':');

  if (!confKeyVal[1]) {
    continue;
  }

  // Trim whitespace from keys.
  const confKey = confKeyVal[0].trim();

  // Trim trailing inline comments from values.
  let confVal = confKeyVal[1];
  confVal = confVal.replace(/#.*/, '');
  // Trim whitespace from values.
  confVal = confVal.trim();

  switch (confKey) {
    case 'app_dir':
      appDir = path.resolve(confVal);

      break;
  }
}

process.env.APP_DIR = appDir;

// process.env.HEADED is deprecated. Remove this `if` block when distro versions <0.9.0 are ancient.
// In the meantime, this is such little overhead that there is no harm leaving it in.
if (!process.env.HEADED) {
  process.env.HEADED = true;
}

require(path.join(appDir, 'index.js'));
